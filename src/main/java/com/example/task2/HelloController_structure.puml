@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.example.task2.HelloController",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1068799382 { 
   	label=models
	labeljust=l
	fillcolor="#7AD3AD"
	style=filled
   
   Angle1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Angle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ descriptor(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ draw(canvas: Canvas, gr: GraphicsContext)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];

Circle1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Circle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ descriptor(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ draw(canvas: Canvas, gr: GraphicsContext)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];

Pentagon1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Pentagon</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ descriptor(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ draw(canvas: Canvas, gr: GraphicsContext)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];

Rectangle1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Rectangle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   length: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># GetHeight(): double</TD></TR>
<TR><TD ALIGN="LEFT" ># SetHeight(value: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ area(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ draw(gr: GraphicsContext, canvas: Canvas)</TD></TR>
<TR><TD ALIGN="LEFT" >+ drawHand(gr: GraphicsContext)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];

Shape1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Shape</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   colorBorder: Color [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   colorFill: Color [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   height: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   lineBorder: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   width: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   x: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   y: double [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ descriptor(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ draw(canvas: Canvas, gr: GraphicsContext)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];

Square1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Square</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ descriptor(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ draw(canvas: Canvas, gr: GraphicsContext)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];

Straight1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Straight</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ descriptor(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ draw(canvas: Canvas, gc: GraphicsContext)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];

Triangle1068799382[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Triangle</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ descriptor(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ draw(canvas: Canvas, gc: GraphicsContext)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];
} 

subgraph cluster_1322970774 { 
   	label=example
	labeljust=l
	fillcolor="#7AD3AD"
	style=filled
   
   subgraph cluster_129515977 { 
   	label=task2
	labeljust=l
	fillcolor="#7AD3AD"
	style=filled
   
   HelloController537999332[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)HelloController</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   borderCount: TextField [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   borderPicker: ColorPicker [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   canvas: Canvas [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   clearbutton: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   fIleManager: FIleManagerShape [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   fillPicker: ColorPicker [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   flowpane: FlowPane [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   gc: GraphicsContext [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   heightCount: TextField [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   info: Label [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   initialValue: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   openBut: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   retBut: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   saveBut: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   shape: Shape [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   shapeFactory: ShapeFactory [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   spinner: Spinner&lt;Integer&gt; [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   stack_shapes: Repository [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   txtCount: TextField [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   widthCount: TextField [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- InitShapes()</TD></TR>
<TR><TD ALIGN="LEFT" >+ initialize(url: URL, resourceBundle: ResourceBundle)</TD></TR>
<TR><TD ALIGN="LEFT" ># onClear()</TD></TR>
<TR><TD ALIGN="LEFT" ># onMouseClicked(event: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onOpen(actionEvent: ActionEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onReturn(actionEvent: ActionEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onSave(actionEvent: ActionEvent)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];
} 
} 

subgraph cluster_310602149 { 
   	label=FileSaveLogic
	labeljust=l
	fillcolor="#7AD3AD"
	style=filled
   
   FIleManagerShape310602149[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)FIleManagerShape</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ loadDataFromFile(file: File): Stack&lt;Shape&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ saveDataToFile(stack: Stack&lt;Shape&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >- setShapeHelper(info: String): Shape</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];

Repository310602149[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Repository</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   _shapes: Stack&lt;Shape&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ addShape(shape: Shape)</TD></TR>
<TR><TD ALIGN="LEFT" >+ popShape()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];
} 

subgraph cluster_572770538 { 
   	label=Factory
	labeljust=l
	fillcolor="#7AD3AD"
	style=filled
   
   ShapeFactory572770538[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ShapeFactory</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ factoryMethod(name: String, x: double, y: double, line: int, colorborder: Color, colorfill: Color): Shape</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DEDA61"
];
} 

'edges    
FIleManagerShape310602149 -> ShapeFactory572770538[label="setShapeHelper() -> factoryMethod()"];
HelloController537999332 -> FIleManagerShape310602149[label="fIleManager
[0..1]"];
HelloController537999332 -> Repository310602149[label="stack_shapes
[0..1]"];
HelloController537999332 -> Shape1068799382[label="shape
[0..1]"];
HelloController537999332 -> ShapeFactory572770538[label="shapeFactory
[0..1]"];
Repository310602149 -> Shape1068799382[label="_shapes
[0..*]"];
Shape1068799382 -> Angle1068799382[arrowhead=none, arrowtail=empty, dir=both];
Shape1068799382 -> Circle1068799382[arrowhead=none, arrowtail=empty, dir=both];
Shape1068799382 -> Pentagon1068799382[arrowhead=none, arrowtail=empty, dir=both];
Shape1068799382 -> Rectangle1068799382[arrowhead=none, arrowtail=empty, dir=both];
Shape1068799382 -> Square1068799382[arrowhead=none, arrowtail=empty, dir=both];
Shape1068799382 -> Straight1068799382[arrowhead=none, arrowtail=empty, dir=both];
Shape1068799382 -> Triangle1068799382[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml